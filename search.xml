<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ajax简介</title>
    <url>/2020/09/02/ajax/</url>
    <content><![CDATA[<h2 id="Day01"><a href="#Day01" class="headerlink" title="Day01"></a>Day01</h2><h3 id="网络相关概念"><a href="#网络相关概念" class="headerlink" title="网络相关概念"></a>网络相关概念</h3><ul>
<li>查看本机ip <code>ifconfig</code></li>
<li>连接到服务器 <code>ping baidu.com</code></li>
<li>DNS服务器：解析域名<ul>
<li>个人电脑将域名传输给DNS服务器，服务器返回ip地址，个人电脑再将ip地址传给电信路由器，再连接到远端服务器</li>
</ul>
</li>
<li>真正访问时，会先访问本地host是否有自定义关系，如果有，则不会访问DNS服务器</li>
</ul>
<h3 id="php基本语法"><a href="#php基本语法" class="headerlink" title="php基本语法"></a>php基本语法</h3><h4 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h4><ul>
<li><code>echo</code> 打印内容</li>
<li>变量声明使用$运算符</li>
<li>进行变量加减的时候，也需要加上$符号，否则不能进行; 字符串拼接要用<code>.</code>连接<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$num1 = <span class="number">100</span>;</span><br><span class="line">$num2 = <span class="number">200</span>;</span><br><span class="line">$result = $num1 + $num2;</span><br><span class="line"><span class="keyword">echo</span> $result;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">$str1 = <span class="string">&#x27;hi &#x27;</span>;</span><br><span class="line">$str2 = <span class="string">&quot; hello&quot;</span>;</span><br><span class="line">$str3 = $str1 . $str2;</span><br><span class="line"><span class="keyword">echo</span> $str3;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h4><h5 id="基本应用"><a href="#基本应用" class="headerlink" title="基本应用"></a>基本应用</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$arr = <span class="keyword">array</span>();</span><br><span class="line">$arr[<span class="number">0</span>] = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">$arr[<span class="number">1</span>] = <span class="string">&quot;lisi&quot;</span>;</span><br><span class="line">$arr[<span class="number">2</span>] = <span class="string">&quot;wangwu&quot;</span>;</span><br><span class="line"><span class="comment">//echo不能输出复杂数据类型</span></span><br><span class="line"><span class="comment">//输出复杂数据类型需要用到下面这两个方法</span></span><br><span class="line">print_r($arr);</span><br><span class="line">var_dump($arr);</span><br><span class="line"><span class="comment">//将数组转化为json格式的字符串的方法</span></span><br><span class="line">json_encode($arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义数组下标索引,剩下未定义的元素下标索引从“0”开始依次递增</span></span><br><span class="line">$arr1 = <span class="keyword">array</span>(<span class="string">&quot;name1&quot;</span>=&gt;<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line">var_dump($arr1);</span><br></pre></td></tr></table></figure>

<h5 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$arr2 = <span class="keyword">array</span>();</span><br><span class="line">$arr2[<span class="string">&quot;zhangsan&quot;</span>] = <span class="keyword">array</span>(<span class="string">&quot;age&quot;</span>=&gt;<span class="string">&quot;18&quot;</span>, <span class="string">&quot;sex&quot;</span>=&gt;<span class="string">&quot;male&quot;</span>, <span class="string">&quot;height&quot;</span>=&gt;<span class="string">&quot;180&quot;</span>);</span><br><span class="line">$arr2[<span class="string">&quot;lisi&quot;</span>] = <span class="keyword">array</span>(<span class="string">&quot;age&quot;</span>=&gt;<span class="string">&quot;18&quot;</span>, <span class="string">&quot;sex&quot;</span>=&gt;<span class="string">&quot;male&quot;</span>, <span class="string">&quot;height&quot;</span>=&gt;<span class="string">&quot;180&quot;</span>);</span><br><span class="line">$arr2[<span class="string">&quot;wangwu&quot;</span>] = <span class="keyword">array</span>(<span class="string">&quot;age&quot;</span>=&gt;<span class="string">&quot;18&quot;</span>, <span class="string">&quot;sex&quot;</span>=&gt;<span class="string">&quot;male&quot;</span>, <span class="string">&quot;height&quot;</span>=&gt;<span class="string">&quot;180&quot;</span>);</span><br><span class="line">var_dump($arr2);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">$result = json_encode($arr2);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;$result &lt;br&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>

<h5 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//count()方法，用来计算数组的长度</span></span><br><span class="line">$arr3 = <span class="keyword">array</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>;$i &lt; count($arr3);$i++)&#123;</span><br><span class="line">    $temp = $arr3[$i];</span><br><span class="line">    <span class="keyword">echo</span> $temp . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//通过键值对循环遍历</span></span><br><span class="line">$arr4 = <span class="keyword">array</span>(<span class="string">&quot;name1&quot;</span>=&gt;<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;name2&quot;</span>=&gt;<span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;name3&quot;</span>=&gt;<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($arr4 <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $key . <span class="string">&quot;&gt;&gt;&gt;&quot;</span> . $value . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="函数的使用"><a href="#函数的使用" class="headerlink" title="函数的使用"></a>函数的使用</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$arr5 = <span class="keyword">array</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;weangwu&quot;</span>);</span><br><span class="line"><span class="comment">//系统函数</span></span><br><span class="line">print_r($arr5);</span><br><span class="line">var_dump($arr5);</span><br><span class="line"><span class="keyword">echo</span> json_encode($arr5);</span><br><span class="line"><span class="comment">//自定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">$num1, $num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $num1 + $num2;</span><br><span class="line">&#125;</span><br><span class="line">$addResult = add(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;计算结果为：&quot;</span> . $addResult;</span><br></pre></td></tr></table></figure>

<h4 id="参数的获取"><a href="#参数的获取" class="headerlink" title="参数的获取"></a>参数的获取</h4><p>get请求参数跟在url后面，多个参数使用&amp;连接<br>post请求的参数在请求体中</p>
<h5 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h5><ul>
<li>预定义变量，处理get请求<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&quot;checkUserName  &quot;</span>;</span><br><span class="line"><span class="comment">//通过key得到传过来的数据</span></span><br><span class="line">$username = $_GET[<span class="string">&quot;username&quot;</span>];</span><br><span class="line">$password = $_GET[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"><span class="comment">//条件判断处理数据</span></span><br><span class="line"><span class="keyword">if</span> ($username === <span class="string">&quot;admin&quot;</span> &amp;&amp; $password === <span class="string">&quot;123&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Login success&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Login failed&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h5><ul>
<li>预定义变量，处理post请求<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&quot;checkUserName  &quot;</span>;</span><br><span class="line"><span class="comment">//通过key得到传过来的数据</span></span><br><span class="line">$username = $_POST[<span class="string">&quot;username&quot;</span>];</span><br><span class="line">$password = $_POST[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"><span class="comment">//条件判断处理数据</span></span><br><span class="line"><span class="keyword">if</span> ($username === <span class="string">&quot;admin&quot;</span> &amp;&amp; $password === <span class="string">&quot;123&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Login success&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Login failed&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span></span><br><span class="line">          content=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;学生成绩结果&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        ul &#123;</span><br><span class="line">            <span class="keyword">list</span>-style: none;</span><br><span class="line">            color: darkred;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">    $data = <span class="keyword">array</span>();</span><br><span class="line">    $data[<span class="number">123</span>] = <span class="keyword">array</span>(<span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;chinese&quot;</span> =&gt; <span class="string">&quot;103&quot;</span>, <span class="string">&quot;math&quot;</span> =&gt; <span class="string">&quot;136&quot;</span>, <span class="string">&quot;english&quot;</span> =&gt; <span class="string">&quot;222&quot;</span>);</span><br><span class="line">    $data[<span class="number">124</span>] = <span class="keyword">array</span>(<span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;chinese&quot;</span> =&gt; <span class="string">&quot;153&quot;</span>, <span class="string">&quot;math&quot;</span> =&gt; <span class="string">&quot;125&quot;</span>, <span class="string">&quot;english&quot;</span> =&gt; <span class="string">&quot;522&quot;</span>);</span><br><span class="line">    $data[<span class="number">125</span>] = <span class="keyword">array</span>(<span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;chinese&quot;</span> =&gt; <span class="string">&quot;163&quot;</span>, <span class="string">&quot;math&quot;</span> =&gt; <span class="string">&quot;2454&quot;</span>, <span class="string">&quot;english&quot;</span> =&gt; <span class="string">&quot;222&quot;</span>);</span><br><span class="line">    $code = $_POST[<span class="string">&quot;code&quot;</span>];</span><br><span class="line">    <span class="comment">//查询数据库,在此处使用前面构建的虚拟数据代替</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span> (array_key_exists($code, $data)) &#123;</span><br><span class="line">        $result = $data[$code]</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> $result[<span class="string">&quot;name&quot;</span>] <span class="meta">?&gt;</span>的成绩如下&lt;/div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;语文：<span class="meta">&lt;?php</span> <span class="keyword">echo</span> $result[<span class="string">&quot;chinese&quot;</span>]<span class="meta">?&gt;</span>分&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;数学：<span class="meta">&lt;?php</span> <span class="keyword">echo</span> $result[<span class="string">&quot;math&quot;</span>]<span class="meta">?&gt;</span>分&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;英语：<span class="meta">&lt;?php</span> <span class="keyword">echo</span> $result[<span class="string">&quot;english&quot;</span>]<span class="meta">?&gt;</span>分&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line">    &lt;div&gt;该学生考号不存在&lt;/div&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Ajax的4个步骤"><a href="#Ajax的4个步骤" class="headerlink" title="Ajax的4个步骤"></a>Ajax的4个步骤</h3><p><img src="http://note.youdao.com/yws/res/1499/B67657C3BC0745BFA4B686A5008745B2" alt="image"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#btn&quot;</span>);</span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> username = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#username&quot;</span>).value;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment">// //1.创建一个新的XMLHttpRequest对象</span></span><br><span class="line">     <span class="comment">// let xhr = new XMLHttpRequest();</span></span><br><span class="line">     <span class="comment">// //指定发送</span></span><br><span class="line">     <span class="comment">// xhr.open(&quot;get&quot;, &quot;../php/checkUsername.php?username=&quot; + username, true);</span></span><br><span class="line">     <span class="comment">// //发送</span></span><br><span class="line">     <span class="comment">// xhr.send(null);</span></span><br><span class="line">     <span class="comment">// //发送成功需要执行的代码</span></span><br><span class="line">     <span class="comment">// xhr.onreadystatechange = function () &#123;</span></span><br><span class="line">     <span class="comment">//     let result = xhr.responseText;</span></span><br><span class="line">     <span class="comment">//     document.querySelector(&quot;#result&quot;).innerHTML = result;</span></span><br><span class="line">     <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.创建一个新的XMLHttpRequest对象</span></span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">        xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//兼容IE6</span></span><br><span class="line">        xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对于get</span></span><br><span class="line">        <span class="comment">// //2.准备发送</span></span><br><span class="line">        <span class="comment">// xhr.open(&quot;get&quot;, &quot;../php/checkUsername.php?username=&quot; + username, true);</span></span><br><span class="line">        <span class="comment">// //3.执行发送</span></span><br><span class="line">        <span class="comment">// xhr.send(null);</span></span><br><span class="line">    <span class="comment">//对于post</span></span><br><span class="line">        <span class="comment">//2.准备发送</span></span><br><span class="line">        xhr.open(<span class="string">&quot;post&quot;</span>, <span class="string">&quot;../php/checkUsername.php&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//3.执行发送</span></span><br><span class="line">        <span class="keyword">let</span> param = <span class="string">&quot;username=&quot;</span> + username;</span><br><span class="line">        <span class="comment">//对于post请求来说，参数应该放在请求体当中。</span></span><br><span class="line">        <span class="comment">//设置xhr请求信息，只有post请求有</span></span><br><span class="line">        xhr.setRequestHeader(<span class="string">&quot;Content-type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">        xhr.send(param);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.设置回调函数</span></span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> result = xhr.responseText;</span><br><span class="line">                <span class="built_in">document</span>.querySelector(<span class="string">&quot;#result&quot;</span>).innerHTML = result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="Ajax的使用"><a href="#Ajax的使用" class="headerlink" title="Ajax的使用"></a>Ajax的使用</h3><h4 id="Ajax封装"><a href="#Ajax封装" class="headerlink" title="Ajax封装"></a>Ajax封装</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myAjax = <span class="function">(<span class="params">type, url, param, dataType, callback, <span class="keyword">async</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">        xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">&quot;get&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (param &amp;&amp; param !== <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            url += <span class="string">&quot;?&quot;</span> + param;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.open(type, url, <span class="keyword">async</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">&quot;get&quot;</span>) &#123;</span><br><span class="line">        xhr.send(<span class="literal">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&quot;post&quot;</span>) &#123;</span><br><span class="line">        xhr.setRequestHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">        xhr.send(param);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">async</span>) &#123;</span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="keyword">let</span> result = <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (dataType === <span class="string">&quot;json&quot;</span>) &#123;</span><br><span class="line">                        result = <span class="built_in">this</span>.responseText;</span><br><span class="line">                        result = <span class="built_in">JSON</span>.parse(result);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dataType === <span class="string">&quot;xml&quot;</span>) &#123;</span><br><span class="line">                        result = <span class="built_in">this</span>.responseXML;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        result = <span class="built_in">this</span>.responseText;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">                        callback(result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> result = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (dataType === <span class="string">&quot;json&quot;</span>) &#123;</span><br><span class="line">                    result = xhr.responseText;</span><br><span class="line">                    result = <span class="built_in">JSON</span>.parse(result);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dataType === <span class="string">&quot;xml&quot;</span>) &#123;</span><br><span class="line">                    result = xhr.responseXML;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result = xhr.responseText;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">                    callback(result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myAjax2 = <span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> defaults = &#123;</span><br><span class="line">        type: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">        url: <span class="string">&quot;#&quot;</span>,</span><br><span class="line">        dataType: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">        <span class="keyword">async</span>: <span class="literal">true</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//obj属性覆盖</span></span><br><span class="line">    <span class="comment">//1、 如果有一些属性只存在obj中， 会给defaults中增加属性</span></span><br><span class="line">    <span class="comment">//2、 如果有一些属性在obj和defaults中都存在， 会将defaults中的默认值覆盖</span></span><br><span class="line">    <span class="comment">//3、 如果有一些属性只在defaults中存在， 在obj中不存在，这时候defaults中将保留预定义的属性</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        defaults[key] = obj[key];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">        xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> params = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> attr <span class="keyword">in</span> defaults.data) &#123;</span><br><span class="line">        params += attr + <span class="string">&quot;=&quot;</span> + defaults.data[attr] + <span class="string">&quot;&amp;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (params) &#123;</span><br><span class="line">        params = params.substring(<span class="number">0</span>, params.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (defaults.type === <span class="string">&quot;get&quot;</span>) &#123;</span><br><span class="line">        defaults.url += <span class="string">&quot;?&quot;</span> + params;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.open(defaults.type, defaults.url, defaults.async);</span><br><span class="line">    <span class="keyword">if</span> (defaults.type === <span class="string">&quot;get&quot;</span>) &#123;</span><br><span class="line">        xhr.send(<span class="literal">null</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (defaults.type === <span class="string">&quot;get&quot;</span>) &#123;</span><br><span class="line">        xhr.setRequestHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">        xhr.send(params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (defaults.async) &#123;</span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="keyword">let</span> result = <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (defaults.dataType === <span class="string">&quot;json&quot;</span>) &#123;</span><br><span class="line">                        result = <span class="built_in">this</span>.responseText;</span><br><span class="line">                        result = <span class="built_in">JSON</span>.parse(result);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (defaults.dataType === <span class="string">&quot;XML&quot;</span>) &#123;</span><br><span class="line">                        result = <span class="built_in">this</span>.responseXML</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        result = <span class="built_in">this</span>.responseText</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    defaults.success(result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> result = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (defaults.dataType === <span class="string">&quot;json&quot;</span>) &#123;</span><br><span class="line">                    result = xhr.responseText;</span><br><span class="line">                    result = <span class="built_in">JSON</span>.parse(result);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (defaults.dataType === <span class="string">&quot;XML&quot;</span>) &#123;</span><br><span class="line">                    result = xhr.responseXML</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result = xhr.responseText</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                defaults.success(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>Git在前端项目中的一些使用</title>
    <url>/2020/10/04/git-learning/</url>
    <content><![CDATA[<h2 id="Git链接远程仓库"><a href="#Git链接远程仓库" class="headerlink" title="Git链接远程仓库"></a>Git链接远程仓库</h2><p>当我们创建了一个项目的时候。首先我们应该把本地的Git仓库和远端的Git仓库连接起来。  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin git@github.com:michaelliao/learngit.git</span></span><br></pre></td></tr></table></figure>
<p>我们可以使用下面的这个命令查看连接的远程仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></span><br></pre></td></tr></table></figure>
<p>接着，我们就可以向远程仓库提交内容了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin master</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>第一次提交的时候，需要加上<code>-u</code>参数，它不仅会把本地的master仓库推送到远程的master仓库，而且会把两者关联起来。这样的话在以后的提交中就可以简化命令，不用携带<code>-u</code>参数  </p>
</blockquote>
<p>同时，当你连接了远程仓库之后，你就可以随时使用<code>git pull</code>来拉取你远程仓库里的代码。</p>
<h2 id="一次命令push多个远程仓库"><a href="#一次命令push多个远程仓库" class="headerlink" title="一次命令push多个远程仓库"></a>一次命令push多个远程仓库</h2><p>git支持绑定多个push的远程地址，所以我们可以添加多个地址，可以做到一行代码，同时提交到多个仓库。  </p>
<p>使用如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote <span class="built_in">set</span>-url --add github &lt;你的仓库地址&gt;</span></span><br></pre></td></tr></table></figure>
<p>也可以直接修改配置文件进行添加：</p>
<blockquote>
<p>打开 .git/config 找到 [remote “github”]，添加对应的 url 即可</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[remote &quot;github&quot;]</span><br><span class="line">    url = https://github.com/zxbetter/test.git</span><br><span class="line">    fetch = +refs/heads/*:refs/remotes/github/*</span><br><span class="line">    url = https://git.oschina.net/zxbetter/test.git</span><br></pre></td></tr></table></figure>

<h2 id="创建新分支"><a href="#创建新分支" class="headerlink" title="创建新分支"></a>创建新分支</h2><p>首先，我们创建dev分支，并且切换到dev分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b dev</span></span><br></pre></td></tr></table></figure>
<p>当然，使用<code>-b</code>参数是简化命令，通过下面的两条命令也可以达到一样的效果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch dev</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout dev</span></span><br></pre></td></tr></table></figure>
<p>然后，你可以使用<code>git branch</code>查看当前的分支<br>这一切做好之后，我们就可以使用<code>git checkout &lt;分支名&gt;</code>在不同的分支之间进行任意的切换</p>
<h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><p>合并分支非常的简单，只需要一行命令即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git merge dev</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="comment"># 将dev分支的内容合并到当前分支上</span></span></span><br></pre></td></tr></table></figure>
<p>但是，这行命令并不是所有时候都会顺利的被执行。如果两个分支的同一文件差异较大，则会产生冲突，这个时候就需要打开产生冲突的文件进行手动的修复。</p>
<h2 id="commit的一些规范"><a href="#commit的一些规范" class="headerlink" title="commit的一些规范"></a>commit的一些规范</h2><h3 id="一些常规的commit规范"><a href="#一些常规的commit规范" class="headerlink" title="一些常规的commit规范"></a>一些常规的commit规范</h3><ul>
<li>type: commit 的类型</li>
<li>feat: 新特性</li>
<li>fix: 修改问题</li>
<li>refactor: 代码重构</li>
<li>docs: 文档修改</li>
<li>style: 代码格式修改, 注意不是 css 修改</li>
<li>test: 测试用例修改</li>
<li>chore: 其他修改, 比如构建流程, 依赖管理.</li>
<li>scope: commit 影响的范围, 比如: route, component, utils, build…</li>
<li>subject: commit 的概述, 建议符合  50/72 formatting</li>
<li>body: commit 具体修改内容, 可以分为多行, 建议符合 50/72 formatting</li>
<li>footer: 一些备注, 通常是 BREAKING CHANGE 或修复的 bug 的链接.</li>
</ul>
<h3 id="Commitizen-替代你的-git-commit"><a href="#Commitizen-替代你的-git-commit" class="headerlink" title="Commitizen: 替代你的 git commit"></a>Commitizen: 替代你的 git commit</h3><p>这是一个特别神奇的工具，可以帮助我们实现git commit规范，使用了这个插件，我们就可以使用<code>git cz</code>命令来代替<code>git commit</code>来提交规范。  </p>
<h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g commitizen cz-conventional-changelog</span><br><span class="line">echo &#x27;&#123; &quot;path&quot;: &quot;cz-conventional-changelog&quot; &#125;&#x27; &gt; ~/.czrc</span><br><span class="line"><span class="meta">#</span><span class="bash"> 全局模式下, 需要 ~/.czrc 配置文件, 为 commitizen 指定 Adapter.</span></span><br></pre></td></tr></table></figure>

<h3 id="在项目里安装"><a href="#在项目里安装" class="headerlink" title="在项目里安装"></a>在项目里安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -D commitizen cz-conventional-changelog</span><br></pre></td></tr></table></figure>
<p>package.json中的配置</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;script&quot;: &#123;</span><br><span class="line">    ...,</span><br><span class="line">    &quot;commit&quot;: &quot;git-cz&quot;,</span><br><span class="line">&#125;,</span><br><span class="line">&quot;config&quot;: &#123;</span><br><span class="line">    &quot;commitizen&quot;: &#123;</span><br><span class="line">        &quot;path&quot;: &quot;node_modules/cz-conventional-changelog&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果全局安装过 commitizen, 那么在对应的项目中执行 git cz or npm run commit 都可以.</p>
<p>效果如下:<br><img src="https://user-gold-cdn.xitu.io/2018/5/16/16369a14ec8704fc?imageslim" alt="img"></p>
<h2 id="杂记"><a href="#杂记" class="headerlink" title="杂记"></a>杂记</h2><ul>
<li>当我们发现每次push的时候都要输入git的帐号和密码时，但我们又不想用ssh连接。这个时候我们就可以尝试去使用这么一行命令<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这行命令产生的作用只有一个，就是在本地全局建立一个文本，在你每次输入帐号和密码的时候记录当前的帐号和密码。这样的话，只需要输入一次帐号和密码，之后push的时候就都不需要输入了！</p>
</blockquote>
</li>
</ul>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/898732864121440">廖雪峰的官方网站</a><br><a href="https://juejin.im/post/6844903606815064077">优雅的提交你的 Git Commit Message</a></p>
]]></content>
      <categories>
        <category>项目规范</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo简单部署</title>
    <url>/2020/09/02/hexo/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>hexo是一个十分流行的搭建静态博客的框架，许多软件工程师使用它来搭建自己的博客，今天我就来说一说使用它的心得体会  </p>
<p>首先，一定要去hexo的官方网站去读一读<a href="https://hexo.io/zh-cn/docs/">官方文档</a>。绝大多数问题都能在这里找到答案</p>
<h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><h3 id="建立Github库"><a href="#建立Github库" class="headerlink" title="建立Github库"></a>建立Github库</h3><p>首先,在你的github上新建一个库，这个库的名称一定要符合命名规范<code>&lt;YourMame&gt;.github.io</code></p>
<h3 id="建立本地仓库"><a href="#建立本地仓库" class="headerlink" title="建立本地仓库"></a>建立本地仓库</h3><p>建立一个本地文件夹，用来存放你的博客项目，名字随你的喜好</p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo -g #安装  </span><br><span class="line">npm update hexo -g #升级  </span><br></pre></td></tr></table></figure>

<h3 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init #初始化</span><br><span class="line">hexo generate #生成</span><br><span class="line">hexo server #启动服务预览</span><br></pre></td></tr></table></figure>
<p>然后，打开浏览器，在地址栏输入<a href="http://localhost:4000/%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%95%8C%E9%9D%A2%E4%BA%86">http://localhost:4000/就可以看到一个简单的博客界面了</a></p>
<h2 id="项目的目录结构"><a href="#项目的目录结构" class="headerlink" title="项目的目录结构"></a>项目的目录结构</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── public //打包后的资源文件</span><br><span class="line">├── scaffolds //基本md配置</span><br><span class="line">├── source //主要存放你要展示的文章，和一些页面的配置</span><br><span class="line">│   ├── _posts // </span><br><span class="line">│   │   └── img</span><br><span class="line">│   │       └── Fetch</span><br><span class="line">│   ├── about //关于页面</span><br><span class="line">│   ├── categories //分类页面</span><br><span class="line">│   ├── images //主要存放文档中的图片</span><br><span class="line">│   ├── search //搜索控件</span><br><span class="line">│   └── tags //标签页面</span><br><span class="line">├── themes //存放下载的主题</span><br><span class="line">├── _config.yml //配置文件，非常重要！！！具体参见官方文档</span><br><span class="line">├── db.json</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">└── yarn.lock</span><br></pre></td></tr></table></figure>

<h2 id="一定要配置的东西"><a href="#一定要配置的东西" class="headerlink" title="一定要配置的东西"></a>一定要配置的东西</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置和远端仓库的链接</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/myjdml/myjdml.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">maste</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索配置文件</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<h2 id="向远端仓库提交"><a href="#向远端仓库提交" class="headerlink" title="向远端仓库提交"></a>向远端仓库提交</h2><ol>
<li>git初始化</li>
<li>执行<code>hexo deploy</code>(若未成功，查看git是否初始化。注意一定要把主题里的<code>.git</code>文件夹删了。)</li>
</ol>
<h2 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h2><p>好了，到现在，一个简单的博客已经搭建完成了。接下来，你会发现一个问题，那就是原生的主题实在是太丑了！！！所以，我们需要下载使用你喜欢的主题</p>
<ol>
<li><p>下载主题</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/Fechin/hexo-theme-diaspora.git themes/diaspora</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启用主题</p>
</li>
</ol>
<p>启用主题需要修改_config.yml中的一些配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">diaspora</span> <span class="comment"># 这里填上你想要使用的主题名</span></span><br></pre></td></tr></table></figure>

<p>然后看一看主题的文档，添加一些自己喜欢的配置就可以了！</p>
<h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><ul>
<li>如果使用gitee的pages的话，尽量使用https。http有几率出现页面无法完全部署的情况。</li>
<li>如果发现gitee数据没有更新的情况的话，需要在pages里进行手动更新。</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>图片加载的一些说明</title>
    <url>/2020/09/06/img-loading/</url>
    <content><![CDATA[<h2 id="图片访问403-Forbidden的问题"><a href="#图片访问403-Forbidden的问题" class="headerlink" title="图片访问403 Forbidden的问题"></a>图片访问403 Forbidden的问题</h2><p>最近碰到了这么一个问题，一张图片，直接在浏览器里是可以打来的。但是通过<code>&lt;img /&gt;</code>标签加载就会出现无法访问的情况，并且返回403 Forbidden。于是上网搜索了一下，原来这是由于服务器设置了防盗链的原因。  </p>
<p>那么要如何解决呢？目前来说，有两种方法。</p>
<h3 id="1-设置images-weserv-nl"><a href="#1-设置images-weserv-nl" class="headerlink" title="1.设置images.weserv.nl"></a>1.设置<code>images.weserv.nl</code></h3><p>这个方法的核心原理就是处理原图片的地址，将原图片缓存，然后使用一种不受限制的路径去访问它</p>
<blockquote>
<p>这是yatessss大佬在vue完成知乎日报web版的解决方案</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getImage(url)&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(url);</span><br><span class="line">	<span class="comment">// 把现在的图片连接传进来，返回一个不受限制的路径</span></span><br><span class="line">	<span class="keyword">if</span>(url !== <span class="literal">undefined</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> url.replace(<span class="regexp">/^(http)[s]*(\:\/\/)/</span>,<span class="string">&#x27;https://images.weserv.nl/?url=&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把图片路径直接传进去,替换一下原来url的<code>http/https</code>。或者直接在图片url前加上<code>https://images.weserv.nl/?url=</code></p>
<h3 id="2-使用no-erferrer"><a href="#2-使用no-erferrer" class="headerlink" title="2.使用no-erferrer"></a>2.使用<code>no-erferrer</code></h3><p>这个方法的核心原理是从源头入手，解决防盗链问题。  </p>
<p>它仅仅需要在index.html的头部添加一个<code>&lt;meta /&gt;</code>标签。内容如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;referrer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-referrer&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>这种方法的原理其实就是阻断事件源的发生。因为我们都知道，图片防盗链的原理是服务端检查头部的referrer字段。原来是浏览器会自动给服务端发送这个请求。如果添加了这行代码的话，那么浏览器就不会发送这个请求。那么服务端自然不能判断出这个请求是否同源。  </p>
<p><strong>但是！！！</strong>  </p>
<p>如果你配置了类似于百度统计的功能。那么你就不能使用这个方法。因为像百度统计类似的统计网站是根据<code>referrer</code>进行统计的</p>
<h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><ul>
<li><a href="https://blog.csdn.net/tiantang_1986/article/details/83748782">访问图片出现403的解决办法</a></li>
<li><a href="https://juejin.im/post/6844903832040767496">解决图片访问403 Forbidden问题</a></li>
</ul>
]]></content>
      <categories>
        <category>踩坑</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>http</tag>
        <tag>兼容性</tag>
      </tags>
  </entry>
  <entry>
    <title>Fetch笔记</title>
    <url>/2020/09/02/fetch/</url>
    <content><![CDATA[<h2 id="关于AJAX的一些回顾"><a href="#关于AJAX的一些回顾" class="headerlink" title="关于AJAX的一些回顾"></a>关于AJAX的一些回顾</h2><p><img src="/images/Fetch/ajax.jpg" alt="ajax"></p>
<p>基本步骤：  </p>
<p>进行Ajax请求相信大家一定不陌生，这里我们一起回顾一下，ajax请求是什么样的！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#btn&quot;</span>);</span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> username = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#username&quot;</span>).value;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment">// //1.创建一个新的XMLHttpRequest对象</span></span><br><span class="line">     <span class="comment">// let xhr = new XMLHttpRequest();</span></span><br><span class="line">     <span class="comment">// //指定发送</span></span><br><span class="line">     <span class="comment">// xhr.open(&quot;get&quot;, &quot;../php/checkUsername.php?username=&quot; + username, true);</span></span><br><span class="line">     <span class="comment">// //发送</span></span><br><span class="line">     <span class="comment">// xhr.send(null);</span></span><br><span class="line">     <span class="comment">// //发送成功需要执行的代码</span></span><br><span class="line">     <span class="comment">// xhr.onreadystatechange = function () &#123;</span></span><br><span class="line">     <span class="comment">//     let result = xhr.responseText;</span></span><br><span class="line">     <span class="comment">//     document.querySelector(&quot;#result&quot;).innerHTML = result;</span></span><br><span class="line">     <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.创建一个新的XMLHttpRequest对象</span></span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">        xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//兼容IE6</span></span><br><span class="line">        xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对于get</span></span><br><span class="line">        <span class="comment">//2.准备发送</span></span><br><span class="line">        xhr.open(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;../php/checkUsername.php?username=&quot;</span> + username, <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//3.执行发送</span></span><br><span class="line">        xhr.send(<span class="literal">null</span>);</span><br><span class="line">    <span class="comment">//对于post</span></span><br><span class="line">        <span class="comment">//2.准备发送</span></span><br><span class="line">        xhr.open(<span class="string">&quot;post&quot;</span>, <span class="string">&quot;../php/checkUsername.php&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//3.执行发送</span></span><br><span class="line">        <span class="keyword">let</span> param = <span class="string">&quot;username=&quot;</span> + username;</span><br><span class="line">        <span class="comment">//对于post请求来说，参数应该放在请求体当中。</span></span><br><span class="line">        <span class="comment">//设置xhr请求信息，只有post请求有</span></span><br><span class="line">        xhr.setRequestHeader(<span class="string">&quot;Content-type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">        xhr.send(param);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.设置回调函数</span></span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> result = xhr.responseText;</span><br><span class="line">                <span class="built_in">document</span>.querySelector(<span class="string">&quot;#result&quot;</span>).innerHTML = result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Fetch-Fetch-Fetch！！！"><a href="#Fetch-Fetch-Fetch！！！" class="headerlink" title="Fetch Fetch Fetch！！！"></a>Fetch Fetch Fetch！！！</h2><p>当我们使用javascript去发送和接收一些信息的时候，我们会发起一个叫做ajax请求的东西。ajax是一种技术，当我们需要发送和接收信息时，信息返回回来，我们需要改变HTML，将它添加到页面中。这个时候浏览器往往需要重新渲染。而我们如果使用了ajax技术的话，浏览器不需要去重新刷新页面，而是只改变需要更新的部分，让页面局部刷新。  </p>
<p>由于原生的js代码实现ajax十分的繁琐，并且有各种适配的问题，所以Jquery封装库实现ajax横空出世，在当时成为了一股潮流。它只需要引入Jquery文件，进行一些简单的配置，就可以实现ajax异步请求。  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.ajax(<span class="string">&#x27;some-url&#x27;</span>, &#123;</span><br><span class="line">  success: <span class="function">(<span class="params">data</span>) =&gt;</span> &#123; <span class="comment">/* do something with the data */</span> &#125;,</span><br><span class="line">  error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="comment">/* do something when an error happens */</span>&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="Fetch的支持"><a href="#Fetch的支持" class="headerlink" title="Fetch的支持"></a>Fetch的支持</h3><p><img src="/images/Fetch/brower.png" alt="image"></p>
<p>Fetch的支持性非常好，支持几乎所有的主流浏览器（老版的IE和迷你版的欧朋除外）。而且因为Fetch是原生的方法，所以它在项目中使用十分的安全。如果你需要使用一些方法，原生不支持。这里有一些<a href="https://github.com/github/fetch">补充</a>  </p>
<h3 id="使用Fetch获取数据"><a href="#使用Fetch获取数据" class="headerlink" title="使用Fetch获取数据"></a>使用Fetch获取数据</h3><p>使用Fetch获取数据很容易，只需要知道资源地址就可以  </p>
<p>例如我想获取到Chris的仓库的数据，我只需要发送一个get请求给<code>api.github.com/users/chriscoyier/repos</code>  </p>
<p>这样就是一个fetch请求：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;https://api.github.com/users/chriscoyier/repos&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>这是不是很简单！！！  </p>
<p>接下来Fetch返回的是一个Promise对象，这是一个不需要回调函数就可以操作异步方法的对象。  </p>
<p>获取到数据之后，我们将我们需要进行的一些操作放在<code>.then</code>方法里  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;https://api.github.com/users/chriscoyier/repos&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;<span class="comment">/* do something */</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>如果你是第一次使用fetch，你会对它返回的response十分惊喜。如果你使用<code>console.log(response)</code>，你将得到下面这些信息</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  body: ReadableStream</span><br><span class="line">  bodyUsed: <span class="literal">false</span></span><br><span class="line">  headers: Headers</span><br><span class="line">  ok : <span class="literal">true</span></span><br><span class="line">  redirected : <span class="literal">false</span></span><br><span class="line">  status : <span class="number">200</span></span><br><span class="line">  statusText : <span class="string">&quot;OK&quot;</span></span><br><span class="line">  type : <span class="string">&quot;cors&quot;</span></span><br><span class="line">  url : <span class="string">&quot;http://some-website.com/some-url&quot;</span></span><br><span class="line">  __proto__ : Response</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里，你会看到fetch会返回给你一些参数，这些参数会告诉你请求的状态。你会看到请求成功（ok: true; status: 200）。但是你也许注意到了, 在这些参数中你看不到任何你请求成功的数据！！  </p>
<p>事实就是如此，我们从GitHub获取的数据隐藏在body的可读文档流中。我们需要一个合适的方法去转换这些文档流，让它们变成我们可以使用的数据。<br>我们知道GitHub返回的是一串json数据，我们可以使用<code>response.json</code>来转换这些数据。  </p>
<p>这里有一些其他的方法去处理不同类型的数据。如果返回的数据是XML格式的。可以用<code>response.text</code>进行数据转换；如果返回的数据是图片。可以用<code>response.blob</code>  </p>
<p>所有的这些转换方法（<code>response.json</code> 或者其他所有的）返回的都是另一个Promise对象，我们可以再用一个<code>.then</code>方法来获取这些数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;https://api.github.com/users/chriscoyier/repos&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Here&#x27;s a list of repos!</span></span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>OK!!这就是一个完整的用fetch进行异步操作的代码了。简短且简单🧲</p>
<h3 id="用Fetch发送数据"><a href="#用Fetch发送数据" class="headerlink" title="用Fetch发送数据"></a>用Fetch发送数据</h3><p>使用fetch发送消息是十分优雅的，你可以只需要配置一下配置项就可以使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;some-url&#x27;</span>, options);</span><br></pre></td></tr></table></figure>

<p>第一个参数，你需要设置你提交请求的方式。如果你没有设置，fetch会自动将设置为get  </p>
<p>第二个参数，设置你的请求头。在现在这个时间段，我们主要用的是json数据。所以我们就设置<code>content-Type</code>为<code>application/json</code>  </p>
<p>第三个参数，设置的是body里的json数据处理。我们使用json数据的时候通常要进行一些处理。所以我们通常会设置<code>JSON.stringify</code>  </p>
<p>下面是一个post请求的实例：  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> content = &#123;<span class="attr">some</span>: <span class="string">&#x27;content&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The actual fetch request</span></span><br><span class="line">fetch(<span class="string">&#x27;some-url&#x27;</span>, &#123;</span><br><span class="line">  method: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(content)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// .then()...</span></span><br></pre></td></tr></table></figure>

<p>如果你的眼光足够敏锐，你就会发现有一些模版代码对于很多<code>post</code>,<code>put</code>和<code>delete</code>请求都适用。当我们已经明确了我们会发送json数据的时候，我们可以重复的将头部设置为<code>JSON.stringify</code>  </p>
<p>但是即使我们使用模板代码，fetch依然可以把异步请求实现的很好。  </p>
<p>然而当使用fetch的时候处理错误信息的时候，并没有像处理成功信息这么容易。。。  </p>
<h3 id="使用fetch处理错误信息"><a href="#使用fetch处理错误信息" class="headerlink" title="使用fetch处理错误信息"></a>使用fetch处理错误信息</h3><p>尽管我们一直希望ajax请求能成功，但是有时候它总是会失败的。一旦失败，有很多种可能性导致fetch请求失败。包括并不限于以下这几点：  </p>
<ol>
<li>你尝试去请求一个不存在的资源。</li>
<li>你没有权限去获取资源。</li>
<li>你设置的一些的请求参数错误。</li>
<li>服务器抛出错误。</li>
<li>服务器请求超时。</li>
<li>服务器宕机。</li>
<li>后台的API改变</li>
<li>。。。</li>
</ol>
<p>如果你的请求失败了，那么就大事不妙了！！你可以想象这样的一种情景，你正在进行网上购物。这时，一个错误产生了，但是设计这个网站的人并没有设计处理请求错误的函数。因此，在你点击购买之后，一切都静止了，什么变化都没有发生。那个页面就挂在那儿，你不知道发生了什么，不知道你是否购买成功了。  </p>
<p>现在，让我们去尝试获取一个不存在的资源来学习来学习如何在使用Fetch的时候处理错误。举个例子，我们错误的把<code>chriscoyier</code>拼写成了<code>chrissycoyier</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Fetching chrissycoyier&#x27;s repos instead of chriscoyier&#x27;s repos</span></span><br><span class="line">fetch(<span class="string">&#x27;https://api.github.com/users/chrissycoyier/repos&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>我们知道这个请求会产生错误，因为在GitHub上是没有<code>chrissycoyier</code>的。因为错误是promise对象返回的，我们使用<code>catch</code>去处理它。  </p>
<p>在不知道具体的处理方法之前，你可能会写出这样一段代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;https://api.github.com/users/chrissycoyier/repos&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;data is&#x27;</span>, data))</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;error is&#x27;</span>, error));</span><br></pre></td></tr></table></figure>

<p>然后触发你的fetch请求，你将会得到这样的一个结果：</p>
<p><img src="/images/Fetch/error1.png" alt="image"></p>
<blockquote>
<p>Fetch failed, but the code that gets executed is the second <code>.then</code> instead of <code>.catch</code></p>
</blockquote>
<p>为什么第二个<code>.then</code>方法会调用执行？为什么promise不想我们所期望的那样使用<code>.catch</code>去捕获错误。太恐怖了！！！😱😱😱  </p>
<p>如果我们使用<code>console.log</code>去执行响应回来的数据。我们会看到一些不同的值  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  body: ReadableStream</span><br><span class="line">  bodyUsed: <span class="literal">true</span></span><br><span class="line">  headers: Headers</span><br><span class="line">  ok: <span class="literal">false</span> <span class="comment">// Response is not ok</span></span><br><span class="line">  redirected: <span class="literal">false</span></span><br><span class="line">  status: <span class="number">404</span> <span class="comment">// HTTP status is 404.</span></span><br><span class="line">  statusText: <span class="string">&quot;Not Found&quot;</span> <span class="comment">// Request not found</span></span><br><span class="line">  type: <span class="string">&quot;cors&quot;</span></span><br><span class="line">  url: <span class="string">&quot;https://api.github.com/users/chrissycoyier/repos&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这些数据大部分都是正常的，比如<code>ok</code>,<code>status</code>和<code>statusText</code>。并且，如同我们所预料是我一样，我们并没有在这其中发现chrissycoyier在GitHub上的数据。  </p>
<p>这个例子充分告诉了我们一件十分重要的事情，Fetch并不会关注你的ajax是否成功。它只关注发送请求，并且从从服务器收到响应。这意味着当请求失败时，我们需要自己抛出错误。  </p>
<p>因此，在第一个<code>.then</code>请求中，只有当请求成功时，才应该对返回的数据进行处理。验证请求是否成功其实很简单，只需要判断<code>response</code>是否为<code>ok</code>就可以了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;some-url&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.ok) &#123;</span><br><span class="line">      <span class="keyword">return</span> response.json()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Find some way to get to execute .catch()</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>当我们知道我们的请求并没有成功时，我们可以通过<code>throw</code>抛出一个错误，或者使用Promise中的<code>reject</code>去激活<code>catch</code>方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// throwing an Error</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;something went wrong!&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// rejecting a Promise</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">&#x27;something went wrong!&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上的两种方式，使用任意一种就可以了。因为这两种方式都可以激活<code>.catch</code>方法  </p>
<p>在这里，我选择去使用<code>Promise.reject</code>,因为它更容易去执行。<code>Errors</code>也很好，但是它的执行比较困难，它唯一的好处是它在堆栈跟踪方面有着得天独厚的优势，但再Fetch方法中我们并不需要这种特质。  </p>
<p>所以，代码就变成了这样： </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;https://api.github.com/users/chrissycoyier/repos&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.ok) &#123;</span><br><span class="line">      <span class="keyword">return</span> response.json()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">&#x27;something went wrong!&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;data is&#x27;</span>, data))</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;error is&#x27;</span>, error));</span><br></pre></td></tr></table></figure>

<p><img src="/images/eFetch/error2.png" alt="image"></p>
<blockquote>
<p>Failed request, but error gets passed into catch correctly</p>
</blockquote>
<p>太好了！！现在我们有办法去捕获错误了。  </p>
<p>但是我们这样处理错误信息返回一个普通的文本并不是特别的友好。我们并不知道究竟是什么地方出问题了。我十分确信再遇到错误时收到这样一个错误信息你并不会感到十分愉快。。。</p>
<p><img src="/images/Fetch/error3.png" alt="image"></p>
<blockquote>
<p>Yeah… I get it that something went wrong… but what exactly? 🙁</p>
</blockquote>
<p>到底是什么错了？是服务器超时了吗？是我的连接被切断了吗？我们没有方法去得知！我们需要一种方法能告诉我们请求发生了什么错误，然后我们就可以很方便的处理它。  </p>
<p>让我们再来看一看返回的信息，看能不能找到什么灵感</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  body: ReadableStream</span><br><span class="line">  bodyUsed: <span class="literal">true</span></span><br><span class="line">  headers: Headers</span><br><span class="line">  ok: <span class="literal">false</span> <span class="comment">// Response is not ok</span></span><br><span class="line">  redirected: <span class="literal">false</span></span><br><span class="line">  status: <span class="number">404</span> <span class="comment">// HTTP status is 404.</span></span><br><span class="line">  statusText: <span class="string">&quot;Not Found&quot;</span> <span class="comment">// Request not found</span></span><br><span class="line">  type: <span class="string">&quot;cors&quot;</span></span><br><span class="line">  url: <span class="string">&quot;https://api.github.com/users/chrissycoyier/repos&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>oh,太好了！在这个案例中，错误的原因是我们请求的资源不存在。我们可以返回一个404状态码。这样我们就知道该做什么了。  </p>
<p>将<code>status</code>和<code>statusText</code>放入<code>.catch</code>方法中，我们可以使用<code>.reject</code>来做这件事:  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;some-url&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.ok) &#123;</span><br><span class="line">      <span class="keyword">return</span> response.json()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(&#123;</span><br><span class="line">        status: response.status,</span><br><span class="line">        statusText: response.statusText</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error.status === <span class="number">404</span>) &#123;</span><br><span class="line">      <span class="comment">// do something about 404</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>好！现在想对于之前已经有了很大的进展了！   </p>
<p>这种错误处理方式对于不需要特定解释的那些确定的HTTP状态是已经完全足够了的，像：</p>
<ul>
<li>401: Unauthorized</li>
<li>404: Not found</li>
<li>408: Connection timeout</li>
</ul>
<p>但是它对于这一种情况就会显得特别不友好：</p>
<ul>
<li>400: Bad request.</li>
</ul>
<p>是什么造成了一个错误的请求？太多的可能性了！例如，如果你丢失了一些必要的参数，会返回400。</p>
<p><img src="/images/Fetch/error4.png" alt="image"></p>
<blockquote>
<p>Stripe’s explains it returns a 400 error if the request is missing a required field</p>
</blockquote>
<p>如果我们只像之前一样处理的话，那么只会返回一个400错误。我们就不知道究竟发生了什么。我们需要更多的信息来告诉我们，究竟缺少了什么？是用户忘记填写了姓名？邮箱？还是信用卡信息？我们并不知道。  </p>
<p>理想的来说，这种情况下服务器应该返回一个对象，告诉我们请求为什么会失败。如果你的后台使用的是node和express，你可能会这么写。  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.status(<span class="number">400</span>).send(&#123;</span><br><span class="line">  err: <span class="string">&#x27;no first name&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在这里，我们不能再第一个<code>.then</code>方法里使用reject,因为我们只能在执行了<code>response.json</code>之后才能读取服务器抛出的错误，然后我们才能决定我们做些什么。  </p>
<p>就像下面这些代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;some-error&#x27;</span>)</span><br><span class="line">  .then(handleResponse)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleResponse</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> response.json()</span><br><span class="line">    .then(<span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (response.ok) &#123;</span><br><span class="line">        <span class="keyword">return</span> json</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(json)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>让我们剖析一下这一坨代码究竟在干啥！首先我们使用<code>response.json</code>来读取服务器返回给我们的json数据。因为<code>response.json</code>返回的是一个json对象，所以我们可以立即使用<code>.then</code>方法去读取这个数据究竟是啥。  </p>
<p>我们在第一个<code>.then</code>方法里包含着第二个<code>.then</code>方法因为我们需要去判断<code>response.ok</code>是否为真，从而判断响应是否成功  </p>
<p>如果你想将 status和statusText和json一起发送给<code>.catch</code>,你可以使用<code>Object.assign()</code>将它们联合在一起。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> error = <span class="built_in">Object</span>.assign(&#123;&#125;, json, &#123;</span><br><span class="line">  status: response.status,</span><br><span class="line">  statusText: response.statusText</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br></pre></td></tr></table></figure>

<p>使用新的<code>handelResponse</code>函数，你可以这样书写代码。这种方式可以自动将数据发送给<code>.then</code>和<code>.catch</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;some-url&#x27;</span>)</span><br><span class="line">  .then(handleResponse)</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data))</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error))</span><br></pre></td></tr></table></figure>

<p>这是我们十分高兴，因为我们折腾了老半天，终于完成了对错误的处理。但是当我们坐下来，喝着咖啡，享受着这惬意的下午茶的时候。我们突然意识到。。。我们似乎还没有对响应数据做处理！！！</p>
<h3 id="处理其他响应类型"><a href="#处理其他响应类型" class="headerlink" title="处理其他响应类型"></a>处理其他响应类型</h3><p>到目前为止，我们只处理了Fetch的json数据请求。这在当今90%的API都返回json数据的情况下解决了大部分的问题。  </p>
<p>但是，另外的10%怎么办。。。  </p>
<p>假如你使用上面的代码去接受XML的响应，你将立即捕获一个错误：</p>
<p><img src="/images/Fetch/failed-text-response.png" alt="image"></p>
<blockquote>
<p>Parsing an invalid JSON produces a Syntax error</p>
</blockquote>
<p>因为返回的是一串xml数据，而非json数据。最简单的，我们不能返回<code>response.json</code>, 取而代之的是<code>response.text</code>。想要这么做的话，我们需要检查请求头里的 content type</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> contentType = response.headers.get(<span class="string">&#x27;content-type&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (contentType.includes(<span class="string">&#x27;application/json&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> response.json()</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (contentType.includes(<span class="string">&#x27;text/html&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> response.text()</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Handle other responses accordingly...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p>下面是之前所有代码的一个合集：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;some-url&#x27;</span>)</span><br><span class="line">  .then(handleResponse)</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data))</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleResponse</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> contentType = response.headers.get(<span class="string">&#x27;content-type&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (contentType.includes(<span class="string">&#x27;application/json&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> handleJSONResponse(response)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (contentType.includes(<span class="string">&#x27;text/html&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> handleTextResponse(response)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Other response types as necessary. I haven&#x27;t found a need for them yet though.</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Sorry, content-type <span class="subst">$&#123;contentType&#125;</span> not supported`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleJSONResponse</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> response.json()</span><br><span class="line">    .then(<span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (response.ok) &#123;</span><br><span class="line">        <span class="keyword">return</span> json</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="built_in">Object</span>.assign(&#123;&#125;, json, &#123;</span><br><span class="line">          status: response.status,</span><br><span class="line">          statusText: response.statusText</span><br><span class="line">        &#125;))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleTextResponse</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> response.text()</span><br><span class="line">    .then(<span class="function"><span class="params">text</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (response.ok) &#123;</span><br><span class="line">        <span class="keyword">return</span> json</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(&#123;</span><br><span class="line">          status: response.status,</span><br><span class="line">          statusText: response.statusText,</span><br><span class="line">          err: text</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你决定使用Fetch，那么你将会经常使用到<code>control</code>+<code>c</code>/<code>v</code>。如果需要在项目中大量使用Fetch的话，下面介绍了一个Fetch的库–zIFetch.</p>
<h3 id="介绍-zIFetch"><a href="#介绍-zIFetch" class="headerlink" title="介绍 zIFetch"></a>介绍 zIFetch</h3><p>zIFetch是一个抽象了数据处理函数的库，它让你只需要关心数据和错误处理而不需要担心响应。</p>
<p>使用zlFetch，首先你可以这么安装它。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install zl-fetch --save</span><br></pre></td></tr></table></figure>

<p>然后，你可以在库里引用它。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Polyfills (if needed)</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;isomorphic-fetch&#x27;</span>) <span class="comment">// or whatwg-fetch or node-fetch if you prefer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 Imports</span></span><br><span class="line"><span class="keyword">import</span> zlFetch <span class="keyword">from</span> <span class="string">&#x27;zl-fetch&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CommonJS Imports</span></span><br><span class="line"><span class="keyword">const</span> zlFetch = <span class="built_in">require</span>(<span class="string">&#x27;zl-fetch&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>zIFetch不仅仅可以移除处理Fetch响应数据的需要。它还可以帮你发送数据而不需要在body里对数据进行转换</p>
<p>下面的这些代码就是一个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> content = &#123;<span class="attr">some</span>: <span class="string">&#x27;content&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Post request with fetch</span></span><br><span class="line">fetch(<span class="string">&#x27;some-url&#x27;</span>, &#123;</span><br><span class="line">  method: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  headers: &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(content)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Post request with zlFetch</span></span><br><span class="line">zlFetch(<span class="string">&#x27;some-url&#x27;</span>, &#123;</span><br><span class="line">  method: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  body: content</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>zIFetch还使得web Tokens认证变得更加容易</p>
<p>身份验证的标准是在头部添加一个<code>Authorization</code>密钥。<code>Authorization</code>的内容将会设置到<code>Bearer your-token-here</code>。zlFetch将帮助你添加这个<code>token</code>配置的字段。</p>
<p>所以下面这两段代码实际上是等价的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> token = <span class="string">&#x27;someToken&#x27;</span></span><br><span class="line">zlFetch(<span class="string">&#x27;some-url&#x27;</span>, &#123;</span><br><span class="line">  headers: &#123;</span><br><span class="line">    Authorization: <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Authentication with JSON Web Tokens with zlFetch</span></span><br><span class="line">zlFetch(<span class="string">&#x27;some-url&#x27;</span>, &#123;token&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Fetch是一项十分神奇的技术，它使得收发消息变得更加容易。我们不需要使用XHR请求，也不需要引入像jQuery一样的库。</p>
<p>尽管Fetch很好，但是它处理起错误来却并不简单。你需要将许多错误信息传递到<code>.catch</code>方法中</p>
<p>使用zlFetch可以避免进行错误处理。</p>
<h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p><a href="https://css-tricks.com/using-fetch/">Using Fetch</a> </p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>Ajax</tag>
        <tag>Fetch</tag>
      </tags>
  </entry>
</search>
